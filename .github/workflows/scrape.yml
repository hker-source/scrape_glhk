name: Run Playwright Scraper and Upload to Google Drive

on:
  workflow_dispatch:
    inputs:
      product_codes:
        description: "List of product codes as JSON array"
        required: true
        default: '["13699"]'

jobs:
  scrape:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps (and Playwright)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers and OS deps
        run: |
          python -m playwright install --with-deps chromium
          python -m playwright --version || true

      - name: Run scraper
        env:
          PRODUCT_CODES: ${{ github.event.inputs.product_codes }}
        run: |
          echo "PRODUCT_CODES=${PRODUCT_CODES}"
          python scrape_greenlight.py

      - name: Debug workspace (show files)
        run: |
          echo "PWD: $(pwd)"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          ls -la

      - name: Install Google API dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Create Google Doc from scraped TXT and upload to Drive
        env:
          # Secret: put your service account JSON (whole JSON content) into this repo secret name GCP_SA_KEY
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          # Drive folder id (you provided this); can be passed directly or stored as a secret if preferred
          DRIVE_FOLDER_ID: 1c-uXaCngAcQ1QUyFDMPuH7hxKO0UX0Dw
        run: |
          set -euo pipefail

          # Write service account key to a file for the google libs
          if [ -z "${GCP_SA_KEY:-}" ]; then
            echo "ERROR: GCP_SA_KEY secret is empty or not set."
            exit 1
          fi
          KEYFILE="$(mktemp)"
          echo "$GCP_SA_KEY" > "$KEYFILE"
          chmod 600 "$KEYFILE"
          export GOOGLE_APPLICATION_CREDENTIALS="$KEYFILE"

          # Run helper script to create Google Doc and upload
          python ./upload_to_drive.py --folder-id "${DRIVE_FOLDER_ID}"

      - name: Upload artifacts (safe fallback)
        uses: actions/upload-artifact@v4
        with:
          name: scraped-outputs
          path: |
            output_*.txt

      - name: Send aggregated TXT via Gmail
        env:
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          # Optional: if you want to send to a different recipient, set RECIPIENT_EMAIL here
          # RECIPIENT_EMAIL: someone@example.com
        run: |
          set -euo pipefail

          python -m pip install --upgrade pip
          python -m pip install requests

          echo "Repository files (for debug):"
          ls -la

          # Show the files we're about to aggregate (debug only)
          ls -la output_*.txt || true

          # Run the email sender. Script is in scripts/email_results.py
          python ./email_results.py
